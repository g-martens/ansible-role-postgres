---
# tasks for install and create postgress database
- name: Install EPEL release
  ansible.builtin.dnf:
    name: epel-release
    state: present
  become: true

- name: Add repository
  ansible.builtin.yum_repository:
    name: epel
    description: EPEL YUM repo
    baseurl: https://download.postgresql.org/pub/repos/yum/{{ pg_version }}/redhat/rhel-9-x86_64/
    enabled: true
    gpgcheck: false

- name: Disable builtin postgresql module
  ansible.builtin.shell: >
    dnf -qy module disable postgresql
  args:
    executable: /bin/bash
  register: disable_builtin_postgres
  changed_when: disable_builtin_postgres.rc == 0
  failed_when: disable_builtin_postgres.rc != 0
  ignore_errors: true
  become: true

- name: Install require packages on EL8 and EL9
  ansible.builtin.package:
    name:
      - python3-pycurl
      - python3-libselinux
      - python3-psycopg2
      - glibc-langpack-en
      - openssl
      - python3-psycopg2
    state: present
  become: true

- name: Install PostgreSQL {{ pg_version }}
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - "postgresql{{ pg_version }}"
    - "postgresql{{ pg_version }}-server"
    - "postgresql{{ pg_version }}-contrib"

- name: Open firewall port for PostgreSQL
  ansible.builtin.firewalld:
    service: postgresql
    permanent: true
    state: enabled
    immediate: true
  become: true

- name: Check if database need too initialized
  ansible.builtin.stat:
    path: "/var/lib/pgsql/{{ pg_version }}/data/PG_VERSION"
  register: pg_data

- name: Set permission and owner for postgres data directory {{ pg_datamount }}
  ansible.builtin.file:
    path: "{{ pg_datamount }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  become: true

- name: create override folder /etc/systemd/system/postgresql-{{ pg_version }}.service.d
  ansible.builtin.file:
    path: "/etc/systemd/system/postgresql-{{ pg_version }}.service.d"
    state: directory
    owner: root
    group: root
    mode: '0755'
    recurse: yes

- name: Create override for postgresql-{{ pg_version }} serivce
  ansible.builtin.copy:
    content: |
      [Service]
      Environment=PGDATA={{ pg_datamount }}
    dest: /etc/systemd/system/postgresql-{{ pg_version }}.service.d/override.conf
  become: true

- name: systemctl daemon-reload
  ansible.builtin.systemd:
    daemon_reload: yes
  become: true

- name: Initialize postgres db
  ansible.builtin.shell: >
    /usr/bin/postgresql-{{ pg_version }}-setup initdb
  become: true
  register: init
  failed_when: "'Data directory is not empty!' in init.stdout_lines"
  ignore_errors: true
  when: not pg_data.stat.exists

- name: Ensure PostgreSQL service is running
  ansible.builtin.service:
    name: postgresql-{{ pg_version }}
    state: started
    enabled: true
  become: true
...
